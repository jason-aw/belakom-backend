# MongoDB
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=belakom

# Redis
redis.host=localhost
redis.port=6379
redis.pass=

# Mail
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=belakom123@gmail.com
spring.mail.password=slqaolhftabajrsw
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=3000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=3000

# Google OAuth
spring.security.oauth2.client.registration.google.client-id=806385598367-gh3pg0erqpa02484rma2j3hej2ppj0l6.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.scope=email,profile

# Custom Properties
app.auth.tokenSecret=04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
# 30 min access token
app.auth.accessTokenExpirationSec=86400
# 1 week refresh token
app.auth.refreshTokenExpirationSec=604800
# 1 week access token for google authentication
app.auth.googleAccessTokenExpirationSec=604800
# 1 hour reset password token
app.auth.passwordResetTokenExpirationSec=3600
# Comma separated list of allowed origins
app.cors.allowedOrigins=http://localhost:8081
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect
# url in frontend for reset password
app.resetPasswordPage=http://localhost:8081/reset-password?token=
